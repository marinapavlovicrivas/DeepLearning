// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/DeepLearning.h"
#include <Rcpp.h>

using namespace Rcpp;

// detectCores
unsigned int detectCores();
RcppExport SEXP DeepLearning_detectCores() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        unsigned int __result = detectCores();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// unrollDbnCpp
DeepBeliefNet unrollDbnCpp(DeepBeliefNet& aDBN);
RcppExport SEXP DeepLearning_unrollDbnCpp(SEXP aDBNSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< DeepBeliefNet& >::type aDBN(aDBNSEXP );
        DeepBeliefNet __result = unrollDbnCpp(aDBN);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// predictRbmCpp
Eigen::MatrixXd predictRbmCpp(const RBM& anRBM, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP DeepLearning_predictRbmCpp(SEXP anRBMSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const RBM& >::type anRBM(anRBMSEXP );
        Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP );
        Eigen::MatrixXd __result = predictRbmCpp(anRBM, aDataMatrix);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// predictDbnCpp
Eigen::MatrixXd predictDbnCpp(const DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP DeepLearning_predictDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const DeepBeliefNet& >::type aDBN(aDBNSEXP );
        Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP );
        Eigen::MatrixXd __result = predictDbnCpp(aDBN, aDataMatrix);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// reconstructRbmCpp
Eigen::MatrixXd reconstructRbmCpp(const RBM& anRBM, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP DeepLearning_reconstructRbmCpp(SEXP anRBMSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const RBM& >::type anRBM(anRBMSEXP );
        Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP );
        Eigen::MatrixXd __result = reconstructRbmCpp(anRBM, aDataMatrix);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// reconstructDbnCpp
Eigen::MatrixXd reconstructDbnCpp(const DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP DeepLearning_reconstructDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const DeepBeliefNet& >::type aDBN(aDBNSEXP );
        Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP );
        Eigen::MatrixXd __result = reconstructDbnCpp(aDBN, aDataMatrix);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// pretrainRbmCpp
RBM pretrainRbmCpp(RBM& anRBM, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix, const PretrainParameters& params, const std::unique_ptr<PretrainProgress>& diag, const ContinueFunction& cont);
RcppExport SEXP DeepLearning_pretrainRbmCpp(SEXP anRBMSEXP, SEXP aDataMatrixSEXP, SEXP paramsSEXP, SEXP diagSEXP, SEXP contSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< RBM& >::type anRBM(anRBMSEXP );
        Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP );
        Rcpp::traits::input_parameter< const PretrainParameters& >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const std::unique_ptr<PretrainProgress>& >::type diag(diagSEXP );
        Rcpp::traits::input_parameter< const ContinueFunction& >::type cont(contSEXP );
        RBM __result = pretrainRbmCpp(anRBM, aDataMatrix, params, diag, cont);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// pretrainDbnCpp
DeepBeliefNet pretrainDbnCpp(DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix, const std::vector<PretrainParameters>& params, const std::unique_ptr<PretrainProgress>& diag, ContinueFunction& cont, const Rcpp::IntegerVector& aSkip);
RcppExport SEXP DeepLearning_pretrainDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP, SEXP paramsSEXP, SEXP diagSEXP, SEXP contSEXP, SEXP aSkipSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< DeepBeliefNet& >::type aDBN(aDBNSEXP );
        Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP );
        Rcpp::traits::input_parameter< const std::vector<PretrainParameters>& >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const std::unique_ptr<PretrainProgress>& >::type diag(diagSEXP );
        Rcpp::traits::input_parameter< ContinueFunction& >::type cont(contSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type aSkip(aSkipSEXP );
        DeepBeliefNet __result = pretrainDbnCpp(aDBN, aDataMatrix, params, diag, cont, aSkip);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// trainDbnCpp
DeepBeliefNet trainDbnCpp(DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix, const TrainParameters& trainParams, const std::unique_ptr<TrainProgress>& diag, const ContinueFunction& cont);
RcppExport SEXP DeepLearning_trainDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP, SEXP trainParamsSEXP, SEXP diagSEXP, SEXP contSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< DeepBeliefNet& >::type aDBN(aDBNSEXP );
        Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP );
        Rcpp::traits::input_parameter< const TrainParameters& >::type trainParams(trainParamsSEXP );
        Rcpp::traits::input_parameter< const std::unique_ptr<TrainProgress>& >::type diag(diagSEXP );
        Rcpp::traits::input_parameter< const ContinueFunction& >::type cont(contSEXP );
        DeepBeliefNet __result = trainDbnCpp(aDBN, aDataMatrix, trainParams, diag, cont);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// reverseRbmCpp
RBM reverseRbmCpp(RBM& anRBM);
RcppExport SEXP DeepLearning_reverseRbmCpp(SEXP anRBMSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< RBM& >::type anRBM(anRBMSEXP );
        RBM __result = reverseRbmCpp(anRBM);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// reverseDbnCpp
DeepBeliefNet reverseDbnCpp(DeepBeliefNet& aDBN);
RcppExport SEXP DeepLearning_reverseDbnCpp(SEXP aDBNSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< DeepBeliefNet& >::type aDBN(aDBNSEXP );
        DeepBeliefNet __result = reverseDbnCpp(aDBN);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// energyRbmCpp
ArrayX1d energyRbmCpp(const RBM& anRBM, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP DeepLearning_energyRbmCpp(SEXP anRBMSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const RBM& >::type anRBM(anRBMSEXP );
        Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP );
        ArrayX1d __result = energyRbmCpp(anRBM, aDataMatrix);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// energyDbnCpp
ArrayX1d energyDbnCpp(const DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP DeepLearning_energyDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const DeepBeliefNet& >::type aDBN(aDBNSEXP );
        Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP );
        ArrayX1d __result = energyDbnCpp(aDBN, aDataMatrix);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// errorRbmCpp
ArrayX1d errorRbmCpp(const DeepBeliefNet& anRBM, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP DeepLearning_errorRbmCpp(SEXP anRBMSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const DeepBeliefNet& >::type anRBM(anRBMSEXP );
        Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP );
        ArrayX1d __result = errorRbmCpp(anRBM, aDataMatrix);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// errorDbnCpp
ArrayX1d errorDbnCpp(const DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP DeepLearning_errorDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const DeepBeliefNet& >::type aDBN(aDBNSEXP );
        Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP );
        ArrayX1d __result = errorDbnCpp(aDBN, aDataMatrix);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// unit_DbnGradient
SEXP unit_DbnGradient(SEXP& aDBN, SEXP& aDataMatrix);
RcppExport SEXP DeepLearning_unit_DbnGradient(SEXP aDBNSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP& >::type aDBN(aDBNSEXP );
        Rcpp::traits::input_parameter< SEXP& >::type aDataMatrix(aDataMatrixSEXP );
        SEXP __result = unit_DbnGradient(aDBN, aDataMatrix);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
